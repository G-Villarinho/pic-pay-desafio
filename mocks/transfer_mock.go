// Code generated by MockGen. DO NOT EDIT.
// Source: transfer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/GSVillas/pic-pay-desafio/domain"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockTransferHandler is a mock of TransferHandler interface.
type MockTransferHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransferHandlerMockRecorder
}

// MockTransferHandlerMockRecorder is the mock recorder for MockTransferHandler.
type MockTransferHandlerMockRecorder struct {
	mock *MockTransferHandler
}

// NewMockTransferHandler creates a new mock instance.
func NewMockTransferHandler(ctrl *gomock.Controller) *MockTransferHandler {
	mock := &MockTransferHandler{ctrl: ctrl}
	mock.recorder = &MockTransferHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferHandler) EXPECT() *MockTransferHandlerMockRecorder {
	return m.recorder
}

// Transfer mocks base method.
func (m *MockTransferHandler) Transfer(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransferHandlerMockRecorder) Transfer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransferHandler)(nil).Transfer), ctx)
}

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// Transfer mocks base method.
func (m *MockTransferService) Transfer(ctx context.Context, payload *domain.TransferPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransferServiceMockRecorder) Transfer(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransferService)(nil).Transfer), ctx, payload)
}

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// Transfer mocks base method.
func (m *MockTransferRepository) Transfer(ctx context.Context, transfer *domain.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransferRepositoryMockRecorder) Transfer(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransferRepository)(nil).Transfer), ctx, transfer)
}
